TypeScript'in Temel Özellikleri

TypeScript, JavaScript'in süper seti olarak tasarlanmıştır ve statik tip kontrolü, modern JavaScript özellikleri ve genişletilebilirlik sağlar.

1. Statik Tip Kontrolü
TypeScript'in en önemli özelliklerinden biri statik tip kontrolüdür. Bu, değişkenlerin ve fonksiyonların türlerinin belirlenmesine ve derleme zamanında tür uyumsuzluklarının yakalanmasına olanak tanır.


let age: number = 30;  // number tipi
let name: string = "Alice";  // string tipi
let isStudent: boolean = true;  // boolean tipi

2. Arabirimler (Interfaces)
Arabirimler, nesnelerin yapısını tanımlamak için kullanılır. Arabirimler, kodun daha okunabilir ve sürdürülebilir olmasını sağlar.


interface User {
  id: number;
  name: string;
  email: string;
}

let user: User = {
  id: 1,
  name: "John Doe",
  email: "john.doe@example.com"
};

3. Sınıflar (Classes)

TypeScript, nesne yönelimli programlama (OOP) konseptlerini destekler. Sınıflar, kalıtım, kapsülleme ve çok biçimlilik gibi OOP prensiplerini uygulamak için kullanılır.


class Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(`Hello, my name is ${this.name}.`);
  }
}

let person = new Person("Alice", 30);
person.greet();

4. Tipler (Types)

Tipler, veri yapılarını ve fonksiyon imzalarını tanımlamak için kullanılır. type anahtar kelimesi ile daha karmaşık tipler oluşturabilirsiniz.


type ID = number;

type User = {
  id: ID;
  name: string;
  email: string;
};

let user: User = {
  id: 1,
  name: "John Doe",
  email: "john.doe@example.com"
};

5. Birleşim ve Kesit Tipleri (Union and Intersection Types)

Birleşim tipleri, bir değerin birden fazla tipe sahip olabileceğini belirtir. Kesit tipleri ise birden fazla tipin birleşimini temsil eder.


type SuccessResponse = {
  status: "success";
  data: any;
};

type ErrorResponse = {
  status: "error";
  message: string;
};

type ApiResponse = SuccessResponse | ErrorResponse;

function handleResponse(response: ApiResponse) {
  if (response.status === "success") {
    console.log(response.data);
  } else {
    console.log(response.message);
  }
}

6. Generics (Genel Tipler)

Generics, fonksiyonlar, sınıflar ve arabirimler için yeniden kullanılabilir bileşenler oluşturmanıza olanak tanır.


function identity<T>(arg: T): T {
  return arg;
}

let numberIdentity = identity<number>(42);
let stringIdentity = identity<string>("Hello");

7. Modüller (Modules)
Modüller, kodunuzu parçalara ayırmanızı ve yeniden kullanılabilir bileşenler oluşturmanızı sağlar. ES6 modül sistemi ile uyumludur.


// math.ts
export function add(a: number, b: number): number {
  return a + b;
}

// main.ts
import { add } from './math';

console.log(add(2, 3));  // 5


8. Dekoratörler (Decorators)

Dekoratörler, sınıflara ve üyelerine meta veri eklemek için kullanılır. Bu özellik, özellikle Angular gibi çerçevelerde yaygın olarak kullanılır.


function sealed(constructor: Function) {
  Object.seal(constructor);
  Object.seal(constructor.prototype);
}

@sealed
class Greeter {
  greeting: string;
  constructor(message: string) {
    this.greeting = message;
  }

  greet() {
    return `Hello, ${this.greeting}`;
  }
}

9. Enumlar (Enums)

Enumlar, sabit değerlerin bir listesini tanımlamak için kullanılır. Bu, daha okunabilir ve bakımı kolay kod yazmanıza yardımcı olur.


enum Direction {
  Up = 1,
  Down,
  Left,
  Right
}

let direction: Direction = Direction.Up;


10. Tür Kapsamı (Type Assertions)

TypeScript, bir değerin belirli bir türe sahip olduğunu belirtmenize olanak tanır. Bu, özellikle JavaScript'ten TypeScript'e geçişte kullanışlıdır.


let someValue: any = "this is a string";
let strLength: number = (someValue as string).length;



11. Mixinler (Mixins)

Mixinler, bir sınıfın başka bir sınıfın işlevselliğini devralmasına olanak tanır. Bu, sınıflar arasında kod tekrarını önlemeye yardımcı olur.


function applyMixins(derivedCtor: any, baseCtors: any[]) {
  baseCtors.forEach(baseCtor => {
    Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
      derivedCtor.prototype[name] = baseCtor.prototype[name];
    });
  });
}

class Disposable {
  isDisposed: boolean = false;
  dispose() {
    this.isDisposed = true;
  }
}

class Activatable {
  isActive: boolean = false;
  activate() {
    this.isActive = true;
  }
  deactivate() {
    this.isActive = false;
  }
}

class SmartObject implements Disposable, Activatable {
  isDisposed: boolean = false;
  dispose: () => void;
  isActive: boolean = false;
  activate: () => void;
  deactivate: () => void;
}

applyMixins(SmartObject, [Disposable, Activatable]);



12- İsim Alanları (Namespaces)

İsim alanları, kodu mantıksal birimler halinde düzenlemenize yardımcı olur. Bu, özellikle büyük projelerde kodun yönetimini kolaylaştırır.

namespace Validation {
  export interface StringValidator {
    isAcceptable(s: string): boolean;
  }

  export class LettersOnlyValidator implements StringValidator {
    isAcceptable(s: string) {
      return /^[A-Za-z]+$/.test(s);
    }
  }
}

let validator: Validation.StringValidator = new Validation.LettersOnlyValidator();
console.log(validator.isAcceptable("Hello"));  // true
console.log(validator.isAcceptable("1234"));   // false




4. Module Resolution (Modül Çözünürlüğü)
TypeScript, modülleri nasıl bulup bağlayacağına dair gelişmiş çözümler sunar. Bu, büyük projelerde bağımlılıkların yönetimini kolaylaştırır.

15. Yorumlama Modları (Strict Mode)
TypeScript, çeşitli sıkılaştırma seçenekleri sunar. Bu modlar, potansiyel hataları yakalamayı ve daha güvenli kod yazmayı sağlar.


{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true
  }
}

16. İşaretli ve İşaretsiz Türler (Tagged and Untagged Unions)

TypeScript, işaretli türlerle, karmaşık veri yapıları oluşturmanıza olanak tanır. Bu, özellikle API'lerden gelen verilerin tip güvenliğini sağlamak için kullanışlıdır.


type Shape =
  | { kind: "circle"; radius: number }
  | { kind: "square"; size: number };

function area(shape: Shape) {
  switch (shape.kind) {
    case "circle":
      return Math.PI * shape.radius ** 2;
    case "square":
      return shape.size ** 2;
  }
}



7. Type Guards (Tür Koruyucuları)

Tür koruyucuları, belirli bir türü kontrol etmenize ve ona göre davranmanıza olanak tanır. Bu, birleşim türlerinde özellikle kullanışlıdır.


function isString(value: any): value is string {
  return typeof value === "string";
}

function example(value: string | number) {
  if (isString(value)) {
    console.log(value.toUpperCase());
  } else {
    console.log(value.toFixed(2));
  }
}







TypeScript, Visual Studio Code gibi modern IDE'ler ile mükemmel entegrasyon sağlar. Bu entegrasyon, kod tamamlama, hata ayıklama, refaktörleme ve daha birçok gelişmiş özellik sunar.

19. Geriye Dönük Uyumluluk
TypeScript, ES3'ten ESNext'e kadar tüm JavaScript sürümleri ile uyumludur. Bu, mevcut projelerinizi TypeScript'e geçirmenizi kolaylaştırır.

20. Topluluk ve Ekosistem
TypeScript, geniş ve aktif bir topluluğa sahiptir. Bu, bol miktarda kütüphane, araç ve eğitim materyali anlamına gelir. Ayrıca, birçok popüler JavaScript kütüphanesi ve çerçevesi TypeScript ile uyumludur veya doğrudan TypeScript ile yazılmıştır.

TypeScript, JavaScript'in üzerine eklediği bu özellikler ve daha fazlasıyla, modern web ve sunucu uygulamaları geliştirmek için güçlü bir araçtır. Statik tip kontrolü, kodun daha güvenilir, bakımı kolay ve hatasız olmasını sağlar. Bu nedenle, büyük ve karmaşık projelerde TypeScript kullanımı giderek yaygınlaşmaktadır.






TypeScript'in Avantajları
Hata Yakalama: Derleme zamanında hataların yakalanması, daha güvenilir ve hatasız kod yazılmasını sağlar.
Kod Tamamlama ve IntelliSense: Geliştirme araçlarıyla entegrasyonu sayesinde kod tamamlama ve IntelliSense gibi özellikler sunar.
Daha İyi Belgelenme: Tip anotasyonları sayesinde kodun daha iyi belgelenmesi ve anlaşılması kolaylaşır.
Modern JavaScript Özellikleri: ES6+ özelliklerini ve daha fazlasını destekler.
Büyük Projelerde Ölçeklenebilirlik: Tip güvenliği ve modüler yapısı sayesinde büyük projelerde ölçeklenebilirlik sağlar.
TypeScript, JavaScript'in gücünü artırarak daha güvenli, okunabilir ve sürdürülebilir kod yazmayı mümkün kılar. Bu özellikler, özellikle büyük ve karmaşık projelerde büyük avantajlar sağlar.